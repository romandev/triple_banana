diff --git tb/components/autofill/content/renderer/password_autofill_agent.cc tb_diff/components/autofill/content/renderer/password_autofill_agent.cc
--- tb/components/autofill/content/renderer/password_autofill_agent.cc
+++ tb_diff/components/autofill/content/renderer/password_autofill_agent.cc
@@ -109,6 +109,7 @@ bool IsElementEditable(const WebInputElement& element) {
   return element.IsEnabled() && !element.IsReadOnly();
 }
 
+#if !defined(ENABLE_TRIPLE_BANANA)
 bool DoUsernamesMatch(const base::string16& potential_suggestion,
                       const base::string16& current_username,
                       bool exact_match) {
@@ -117,6 +118,7 @@ bool DoUsernamesMatch(const base::string16& potential_suggestion,
   return !exact_match && IsPrefixOfEmailEndingWithAtSign(current_username,
                                                          potential_suggestion);
 }
+#endif
 
 // Returns whether the |username_element| is allowed to be autofilled.
 //
@@ -173,6 +175,7 @@ bool CanShowUsernameSuggestion(const PasswordFormFillData& fill_data,
   return false;
 }
 
+#if !defined(ENABLE_TRIPLE_BANANA)
 // This function attempts to find the matching credentials for the
 // |current_username| by scanning |fill_data|. The result is written in
 // |username| and |password| parameters.
@@ -246,6 +249,7 @@ bool IsPublicSuffixDomainMatch(const std::string& url1,
   return gurl1.scheme() == gurl2.scheme() && domain1 == domain2 &&
          gurl1.port() == gurl2.port();
 }
+#endif
 
 // Helper function that calculates form signature for |password_form| and
 // returns it as WebString.
@@ -328,6 +332,7 @@ WebInputElement ConvertToWebInput(const WebFormControlElement& element) {
   return input ? *input : WebInputElement();
 }
 
+#if !defined(ENABLE_TRIPLE_BANANA)
 // Returns true if |element|'s frame origin is not PSL matched with the origin
 // of any parent frame.
 bool IsInCrossOriginIframe(const WebInputElement& element) {
@@ -346,6 +351,7 @@ bool IsInCrossOriginIframe(const WebInputElement& element) {
   }
   return false;
 }
+#endif
 
 // Whether any of the fields in |form| is a password field.
 bool FormHasPasswordField(const FormData& form) {
@@ -1506,6 +1512,9 @@ bool PasswordAutofillAgent::FillUserNameAndPassword(
     WebInputElement password_element,
     const PasswordFormFillData& fill_data,
     RendererSavePasswordProgressLogger* logger) {
+#if defined(ENABLE_TRIPLE_BANANA)
+  return false;
+#else
   LogMessage(logger, Logger::STRING_FILL_USERNAME_AND_PASSWORD_METHOD);
 
   bool is_single_username_fill = password_element.IsNull();
@@ -1628,6 +1637,7 @@ bool PasswordAutofillAgent::FillUserNameAndPassword(
 
   LogFirstFillingResult(fill_data, FillingResult::kSuccess);
   return true;
+#endif
 }
 
 void PasswordAutofillAgent::LogPrefilledUsernameFillOutcome(
