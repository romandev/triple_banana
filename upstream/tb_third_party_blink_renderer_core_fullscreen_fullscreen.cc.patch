diff --git tb/third_party/blink/renderer/core/fullscreen/fullscreen.cc tb_diff/third_party/blink/renderer/core/fullscreen/fullscreen.cc
--- tb/third_party/blink/renderer/core/fullscreen/fullscreen.cc
+++ tb_diff/third_party/blink/renderer/core/fullscreen/fullscreen.cc
@@ -58,6 +58,10 @@
 #include "third_party/blink/renderer/platform/heap/heap.h"
 #include "third_party/blink/renderer/platform/instrumentation/use_counter.h"
 
+#if defined(ENABLE_TRIPLE_BANANA)
+#include "third_party/blink/renderer/core/fullscreen/fullscreen_media_controller.h"
+#endif
+
 namespace blink {
 
 namespace {
@@ -565,6 +569,32 @@ ScriptPromise Fullscreen::RequestFullscreen(Element& pending,
                                             RequestType request_type,
                                             ScriptState* script_state,
                                             ExceptionState* exception_state) {
+#if defined(ENABLE_TRIPLE_BANANA)
+  if (RuntimeEnabledFeatures::MediaRemoteEnabled()) {
+    auto* query_element = IsA<HTMLVideoElement>(pending)
+                              ? &pending
+                              : pending.QuerySelector("video");
+    if (query_element) {
+      auto* video_element = DynamicTo<HTMLVideoElement>(query_element);
+      video_element->blur();
+      if (IsFullscreenElement(*video_element) ||
+          video_element->videoVisibleSize().IsEmpty()) {
+        return ScriptPromise();
+      }
+      return RequestFullscreen(options, *video_element, request_type,
+                               script_state, exception_state);
+    }
+  }
+  return RequestFullscreen(options, pending, request_type, script_state,
+                           exception_state);
+}
+
+ScriptPromise Fullscreen::RequestFullscreen(const FullscreenOptions* options,
+                                            Element& pending,
+                                            RequestType request_type,
+                                            ScriptState* script_state,
+                                            ExceptionState* exception_state) {
+#endif
   RequestFullscreenScope scope;
 
   // 1. Let |pending| be the context object.
@@ -633,6 +663,13 @@ ScriptPromise Fullscreen::RequestFullscreen(Element& pending,
     LocalFrame& frame = *window.GetFrame();
     frame.GetChromeClient().EnterFullscreen(frame, options,
                                             for_cross_process_descendant);
+#if defined(ENABLE_TRIPLE_BANANA)
+    if (RuntimeEnabledFeatures::MediaRemoteEnabled() &&
+        IsA<HTMLVideoElement>(pending)) {
+      FullscreenMediaController::Get().DispatchEnteredVideoFullscreen(
+          DynamicTo<HTMLVideoElement>(pending));
+    }
+#endif
 
     // After the first fullscreen request, the user activation should be
     // consumed, and the following fullscreen requests should receive an error.
@@ -810,6 +847,17 @@ ScriptPromise Fullscreen::ExitFullscreen(Document& doc,
     return ScriptPromise();
   }
 
+#if defined(ENABLE_TRIPLE_BANANA)
+  if (!ua_originated && RuntimeEnabledFeatures::MediaRemoteEnabled() &&
+      IsA<HTMLVideoElement>(FullscreenElementFrom(doc))) {
+    if (exception_state) {
+      exception_state->ThrowDOMException(DOMExceptionCode::kNotAllowedError,
+                                         "Unable to exit fullscreen");
+    }
+    return ScriptPromise();
+  }
+#endif
+
   if (script_state)
     resolver = MakeGarbageCollected<ScriptPromiseResolver>(script_state);
 
@@ -882,6 +930,11 @@ void Fullscreen::DidExitFullscreen(Document& document) {
   // If this is a response to an ExitFullscreen call then
   // continue exiting. Otherwise call FullyExitFullscreen.
   Fullscreen& fullscreen = From(*document.domWindow());
+#if defined(ENABLE_TRIPLE_BANANA)
+  if (RuntimeEnabledFeatures::MediaRemoteEnabled()) {
+    FullscreenMediaController::Get().DispatchExitedVideoFullscreen();
+  }
+#endif
   PendingExits exits;
   exits.swap(fullscreen.pending_exits_);
   if (exits.IsEmpty()) {
