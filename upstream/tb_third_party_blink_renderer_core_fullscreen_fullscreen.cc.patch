diff --git tb/third_party/blink/renderer/core/fullscreen/fullscreen.cc tb_diff/third_party/blink/renderer/core/fullscreen/fullscreen.cc
--- tb/third_party/blink/renderer/core/fullscreen/fullscreen.cc
+++ tb_diff/third_party/blink/renderer/core/fullscreen/fullscreen.cc
@@ -565,6 +565,33 @@ ScriptPromise Fullscreen::RequestFullscreen(Element& pending,
                                             RequestType request_type,
                                             ScriptState* script_state,
                                             ExceptionState* exception_state) {
+#if defined(ENABLE_TRIPLE_BANANA)
+  if (RuntimeEnabledFeatures::MediaRemoteEnabled()) {
+    auto* query_element = IsA<HTMLVideoElement>(pending)
+                              ? &pending
+                              : pending.QuerySelector("video");
+    if (query_element) {
+      auto* video_element = DynamicTo<HTMLVideoElement>(query_element);
+      video_element->blur();
+      if (IsFullscreenElement(*video_element) ||
+          video_element->videoVisibleSize().IsEmpty()) {
+        return ScriptPromise();
+      }
+      From(*pending.GetDocument().domWindow()).media_element_ = video_element;
+      return RequestFullscreen(options, *video_element, request_type,
+                               script_state, exception_state);
+    }
+  }
+  return RequestFullscreen(options, pending, request_type, script_state,
+                           exception_state);
+}
+
+ScriptPromise Fullscreen::RequestFullscreen(const FullscreenOptions* options,
+                                            Element& pending,
+                                            RequestType request_type,
+                                            ScriptState* script_state,
+                                            ExceptionState* exception_state) {
+#endif
   RequestFullscreenScope scope;
 
   // 1. Let |pending| be the context object.
@@ -633,6 +660,16 @@ ScriptPromise Fullscreen::RequestFullscreen(Element& pending,
     LocalFrame& frame = *window.GetFrame();
     frame.GetChromeClient().EnterFullscreen(frame, options,
                                             for_cross_process_descendant);
+#if defined(ENABLE_TRIPLE_BANANA)
+    if (RuntimeEnabledFeatures::MediaRemoteEnabled() &&
+        IsA<HTMLVideoElement>(pending)) {
+      if (From(window).processor_.is_bound()) {
+        From(window).processor_.reset();
+      }
+      From(window).dispatcher_->OnEnteredVideoFullscreen(
+          From(window).processor_.BindNewPipeAndPassRemote());
+    }
+#endif
 
     // After the first fullscreen request, the user activation should be
     // consumed, and the following fullscreen requests should receive an error.
@@ -650,6 +687,26 @@ ScriptPromise Fullscreen::RequestFullscreen(Element& pending,
   return promise;
 }
 
+#if defined(ENABLE_TRIPLE_BANANA)
+void Fullscreen::Play() {
+  if (!media_element_)
+    return;
+  media_element_->Play();
+}
+
+void Fullscreen::Pause() {
+  if (!media_element_)
+    return;
+  media_element_->pause();
+}
+
+void Fullscreen::SetRelativePosition(double seconds) {
+  if (!media_element_)
+    return;
+  media_element_->setCurrentTime(media_element_->currentTime() + seconds);
+}
+#endif
+
 void Fullscreen::DidResolveEnterFullscreenRequest(Document& document,
                                                   bool granted) {
   if (!document.domWindow())
@@ -810,6 +867,17 @@ ScriptPromise Fullscreen::ExitFullscreen(Document& doc,
     return ScriptPromise();
   }
 
+#if defined(ENABLE_TRIPLE_BANANA)
+  if (!ua_originated && RuntimeEnabledFeatures::MediaRemoteEnabled() &&
+      IsA<HTMLVideoElement>(FullscreenElementFrom(doc))) {
+    if (exception_state) {
+      exception_state->ThrowDOMException(DOMExceptionCode::kNotAllowedError,
+                                         "Unable to exit fullscreen");
+    }
+    return ScriptPromise();
+  }
+#endif
+
   if (script_state)
     resolver = MakeGarbageCollected<ScriptPromiseResolver>(script_state);
 
@@ -882,6 +950,11 @@ void Fullscreen::DidExitFullscreen(Document& document) {
   // If this is a response to an ExitFullscreen call then
   // continue exiting. Otherwise call FullyExitFullscreen.
   Fullscreen& fullscreen = From(*document.domWindow());
+#if defined(ENABLE_TRIPLE_BANANA)
+  if (RuntimeEnabledFeatures::MediaRemoteEnabled()) {
+    fullscreen.dispatcher_->OnExitedVideoFullscreen();
+  }
+#endif
   PendingExits exits;
   exits.swap(fullscreen.pending_exits_);
   if (exits.IsEmpty()) {
@@ -1023,6 +1096,9 @@ void Fullscreen::ElementRemoved(Element& node) {
 void Fullscreen::Trace(Visitor* visitor) const {
   visitor->Trace(pending_requests_);
   visitor->Trace(pending_exits_);
+#if defined(ENABLE_TRIPLE_BANANA)
+  visitor->Trace(media_element_);
+#endif
   Supplement<LocalDOMWindow>::Trace(visitor);
   ExecutionContextLifecycleObserver::Trace(visitor);
 }
