diff --git tb/third_party/blink/renderer/core/html/media/autoplay_policy.cc tb_diff/third_party/blink/renderer/core/html/media/autoplay_policy.cc
--- tb/third_party/blink/renderer/core/html/media/autoplay_policy.cc
+++ tb_diff/third_party/blink/renderer/core/html/media/autoplay_policy.cc
@@ -26,6 +26,10 @@
 #include "third_party/blink/renderer/platform/runtime_enabled_features.h"
 #include "third_party/blink/renderer/platform/wtf/assertions.h"
 
+#if defined(ENABLE_TRIPLE_BANANA)
+#include "third_party/blink/renderer/core/html/media/html_video_element.h"
+#endif
+
 namespace blink {
 
 namespace {
@@ -140,6 +144,12 @@ bool AutoplayPolicy::DocumentHasUserExceptionFlag(const Document& document) {
 // static
 bool AutoplayPolicy::DocumentShouldAutoplayMutedVideos(
     const Document& document) {
+#if defined(ENABLE_TRIPLE_BANANA)
+  if (ComputeLockPendingUserGestureRequired(document)) {
+    return false;
+  }
+#endif
+
   return GetAutoplayPolicyForDocument(document) !=
          AutoplayPolicy::Type::kNoUserGestureRequired;
 }
@@ -294,6 +304,19 @@ bool AutoplayPolicy::IsOrWillBeAutoplayingMutedInternal(bool muted) const {
 }
 
 bool AutoplayPolicy::IsLockedPendingUserGesture() const {
+#if defined(ENABLE_TRIPLE_BANANA)
+  if (RuntimeEnabledFeatures::MediaRemoteEnabled() &&
+      IsA<HTMLVideoElement>(element_.Get()) &&
+      DynamicTo<HTMLVideoElement>(element_.Get())->IsFullscreen()) {
+    return false;
+  }
+
+  if (ComputeLockPendingUserGestureRequired(element_->GetDocument())) {
+    return !LocalFrame::HasTransientUserActivation(
+        element_->GetDocument().GetFrame());
+  }
+#endif
+
   if (IsUsingDocumentUserActivationRequiredPolicy())
     return !IsDocumentAllowedToPlay(element_->GetDocument());
 
